<ArrayOfAcceptanceChecklist xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.datacontract.org/2004/07/Slb.Scc.Acceptance.Checklist"><AcceptanceChecklist><PlatformFamily>Petrel</PlatformFamily><Rules><ChecklistRule><RuleCode>CHECK_TYPE_MANUAL_1</RuleCode><RuleDescription>1. Plug-in has to provide installation/uninstallation instructions including release notes.
2. The release notes must provide details on the features of the plug-in that were added or removed from a previous release. It should also include descriptions of bugs fixed since the previous release, and a definition of the custom domain objects used by the plug-in (if applicable). 
3. For the 2014 release onward, where the new Petrel Ribbon style user interface will be operating, the release notes must provide appropriate images showing the placement of the plug-in commands in the ribbon or mini toolbar. </RuleDescription><RuleNumber>1.1</RuleNumber><RuleVerification>1. Review installation guide.
2. Prepare environment (OS, Petrel version, 3rd part application, licenses, etc).
3. Install the plug-in.
4. Review release notes.
5. Using the Release Notes for information test for bugs that were fixed and workarounds that were provided. 
6. Make sure all plug-in custom domain objects are listed along with their definitions in the release notes.
7. Check release notes for images showing the plug-in placement in the ribbon or mini toobar for the 2014 release onward.</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_SINGLE_INSTALL</RuleCode><RuleDescription>Plug-in installer must correctly install the package. 
Installation should add a &lt;plugin&gt; element to the PluginManagerSettings.xml file. 
Installation must NOT modify the petrel.exe.config file. </RuleDescription><RuleNumber>1.2</RuleNumber><RuleVerification>1. Install the plug-in.
2. Check that all files for the plug-in are installed in the correct folders. 
3. Verify that the PluginManagerSettings.xml file has the &lt;plugin&gt; element.
4. Verify that the petrel.exe.config file has not been modified. </RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UNINSTALL_PLUGIN</RuleCode><RuleDescription>Plug-in uninstaller must correctly uninstall the package.</RuleDescription><RuleNumber>1.3</RuleNumber><RuleVerification>1. Uninstall the plug-in.
2. Check that all files for the plug-in are removed with the possible exception of files requiring manual changes and log files.</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_MANUAL_4</RuleCode><RuleDescription>The plug-in has to be able to run properly when installed in an alternative directory other than the default "Extensions" directory. </RuleDescription><RuleNumber>1.4</RuleNumber><RuleVerification>1. Install the plug-in using an alternative folder as its installation location. For example, C:\test. Need to change PluginManagerSettings.xml file by adding &lt;DefaultDirectory/&gt; element. 
2. Run Petrel and start the plug-in. </RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_PIP_IN_MSI</RuleCode><RuleDescription>1. Plug-in installer has to be done as PIP, or must include PIP as a component if provided as MSI, and use PluginManager.exe to install the PIP part of the plugin. 
2. If the installer is not a PIP file, then the installation instructions must provide instructions for unattended installation. </RuleDescription><RuleNumber>1.5</RuleNumber><RuleVerification>1. Check if the installer file is a PIP-file or not. 
2. If MSI, then does it wrap a PIP file and custom action executes PluginManager.exe/install/allusers? 
3. If the installer is not a PIP file check that instructions for unattended installation are provided and that the plug-in can be correctly installed by following these instructions.</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_NATIVE_DLL</RuleCode><RuleDescription>The installed dll files list must not include any dll files installed by Petrel except for OceanCA.dll and 3rd party libraries used out of process (follow rule 1.8).</RuleDescription><RuleNumber>1.6</RuleNumber><RuleVerification>The installed dll files list must not include any dll files installed by Petrel except for OceanCA.dll and 3rd party libraries used out of process (follow rule 1.8).</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_SLB_LICENSE</RuleCode><RuleDescription>Slb.License.dll cannot be used starting with 2012.1</RuleDescription><RuleNumber>1.7</RuleNumber><RuleVerification>Slb.License.dll cannot be used starting with 2012.1</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_3RD_PARTY</RuleCode><RuleDescription>1. Any use of 3rd party libraries should be clearly documented. Care should be taken not to require very specific versions of commonly used libraries (eg Qt, FFT, Zlib1, Office Interop), as this may cause conflicts with other plug-ins.
2. If the plug-in has to make use of a 3rd party library that is installed with Petrel, but not explicitly listed in the Ocean for Petrel release Notes, this library should be merged (statically linked using ILMerged or similar tool) to one of the plug-in dll files.
3. The version of any 3rd party library used by the plug-in must be clearly indicated. This 3rd party library version must be readily available to developers of other plug-ins.
4. The plug-in must comply with the Open Source provisions of the Ocean Software Development Framework License Agreement and/or the Ocean Remarketer program.?
 </RuleDescription><RuleNumber>1.8</RuleNumber><RuleVerification>1. Make sure 3rd party libraries are mentioned in the release notes.
2. Make sure 3rd party libraries are mentioned in the installation guide if any installation time action is needed.
3. Make sure the necessary files/installers for 3rd party libraries are readily available. 
4. Align with the 3rd party library versions documented in the Ocean Release Notes, unless the library is statically compiled in, or executed out-of-process and installed into a folder that is not on the Petrel private probing path (i.e. a subfolder in the .pip package which no plug-in libraries dynammically load into the Petrel main process). 
5. Check that the plug-in does not take dependency on any 3rd party libraries installed with Petrel but not explicitly documented in Ocean Release Notes
6. Check that the plug-in does not use any libraries from the \External folder</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_SAME_NAME</RuleCode><RuleDescription>The installed dll files with same name used in different plug-ins have to be: 
* identical (for native), 
* identical or a different Assembly Version for managed. 

Managed libraries included in multiple plug-ins from the same vendor may have different content and at the same time the same Assembly Version, when the vendor proves: 
* the library is installed in just one copy per major Petrel version regardless of the number of plug-ins installed, 
* the assembly has a different Assembly File Version, 
* the assembly is binary backwards and forwards compatible, 
* the plug-ins are tested for mutual coexistence in all version combinations (e.g. the shared assembly is behavior compatible) 

Libraries shared by multiple plug-ins from different vendors must be included in the 3rd party library list (see 1.8) </RuleDescription><RuleNumber>1.9</RuleNumber><RuleVerification>If a library is used in multiple plug-ins, then check that each is using an identical copy (for native), or different Assembly Version (for managed), and keep the dependent library stable for a full major Petrel release cycle.

Managed libraries included in multiple plugins from the same vendor differ in Assembly Version or be backward and forward compatible with each other (all publically visible types and signatures must match across all versions). This can be verified by a tool such as NDepend in both directions version1 -&gt; version2 and version2-&gt;version1 (i.e. in the backward and forward direction).

When such library is included in multiple plugins, it must only physically install in one copy. 

Vendor provides evidence that all version combinations of previously published plugins using this library were tested. Ocean Acceptance team cannot take responsibility for behavior compatibility testing.</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_MANUAL_6</RuleCode><RuleDescription>Petrel must not stop responding, crash, or become unstable during the validation.</RuleDescription><RuleNumber>2.1</RuleNumber><RuleVerification>Thorough (fit for purpose) testing should be performed and documented.  The Schlumberger Acceptance Team will review all documentation to determine its suitability and perform random functional testing.</RuleVerification><TopicName>Stability</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_MANUAL_SINGLE_INSTALL</RuleCode><RuleDescription>Performance check. Petrel startup time must not increase by more than 0.5% (per module).</RuleDescription><RuleNumber>2.2</RuleNumber><RuleVerification>Measure startup time for Petrel with and without your plug-in present. Since a plug-in can have multiple modules look at the startup time difference and divide by the number of modules for a per module start time cost. This should be less than or equal to 0.5% of the empty Petrel startup time. </RuleVerification><TopicName>Stability</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_MANUAL_7</RuleCode><RuleDescription>Data must not be corrupted if module lifecycle aborted.</RuleDescription><RuleNumber>3.1</RuleNumber><RuleVerification>1. Identify all the domain objects manipulated by the plug-in. They have to be listed in Release notes.
2. Save Petrel project with new name before starting data manipulation.
3. Start a plug-in operation that will manipulate the data. Abort the process.
4. Save the project and close Petrel.
5. Visualize all manipulated domain objects in all possible visualization windows of Petrel.
6. Run the basic workflows of Petrel to ensure that data is not corrupted.
7. Using Reference Project Tool (RPT), compare Petrel Projects that were saved before and after the aborted operation. Verify that each object that differs is contained in the list of domain objects manipulated by the plug-in.</RuleVerification><TopicName>Module Lifecycle</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_MANUAL_8</RuleCode><RuleDescription>When a plug-in is loaded without a license being checked out, it should:
1. Restrict access to plug-in functionality 
2. Allow an end user to continue to fully utilize their Petrel project (plug-in must continue to serialize/deserialize its custom data)</RuleDescription><RuleNumber>3.2</RuleNumber><RuleVerification>Using the test Petrel project that contains data created by the plug-in. 
1. Run Petrel without the plug-in license.
2. Successfully perform save and save as operations on the project after further changes are made.</RuleVerification><TopicName>Module Lifecycle</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_MANUAL_9</RuleCode><RuleDescription>Module uses Flex Feature for licensing.</RuleDescription><RuleNumber>3.3</RuleNumber><RuleVerification>1. Start Petrel with the module and its Flex Feature license available.
2. Petrel message log should be without a message about license unavailable;
3. Close and restart Petrel with the plug-in Flex Feature license unavailable.
4. The plug-in should post to the message log to inform the user the license is unavailable.</RuleVerification><TopicName>Module Lifecycle</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_MANUAL_11</RuleCode><RuleDescription>In general, the plug-in must be built on the major release of Petrel (It will then work with any subsequent minor release).</RuleDescription><RuleNumber>3.4</RuleNumber><RuleVerification>1. Review the plug-in installation guide and release notes to identify Petrel versions the plug-in operates with. 
2. Check the plug-in installation and uninstall  and its ability to run against all assigned versions.</RuleVerification><TopicName>Module Lifecycle</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_PETREL_API</RuleCode><RuleDescription>The plug-in is only allowed to use public API's. </RuleDescription><RuleNumber>3.5</RuleNumber><RuleVerification>Check that the plug-in uses only Petrel dll files located in the Petrel Public folder. Exception are 3rd party libraries installed with Petrel and specifically mentioned in the Ocean Release Notes.</RuleVerification><TopicName>Module Lifecycle</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_STRONGLY_NAMED</RuleCode><RuleDescription>All assemblies associated with the module have to be strongly named</RuleDescription><RuleNumber>4.1</RuleNumber><RuleVerification>1. Need to install .NET Framework SDK
2. Use following command to validate that the assembly is strongly named.
sn ?v &lt;assemblyfilename&gt;
3. If the assembly is strongly named, sn.exe will display the following message:
Assembly &lt;AssemblyName&gt; is valid.</RuleVerification><TopicName>Security</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_SIGNED</RuleCode><RuleDescription>Module must be signed with a controlled key (Verisign or self generated key)</RuleDescription><RuleNumber>4.2</RuleNumber><RuleVerification>1. Review Installation guide to find public key token provided.
2. Perform sn -T command.
3. Check that the public key token of the key used to sign all module assemblies matches the public key token provided in Installation guide.</RuleVerification><TopicName>Security</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_ANTIVIRUS</RuleCode><RuleDescription>Installer has to pass antivirus check</RuleDescription><RuleNumber>4.3</RuleNumber><RuleVerification>Use an anti-virus application manually to check the assemblies being deployed with your plug-in. </RuleVerification><TopicName>Security</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_MANUAL_SYSTEM_FILES</RuleCode><RuleDescription>Validate that the plugin does not modify any system files during its operation except those intended.</RuleDescription><RuleNumber>4.4</RuleNumber><RuleVerification>After execution of Petrel including plug-in check for modified files. </RuleVerification><TopicName>Security</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_MANUAL_13</RuleCode><RuleDescription>All changeable files (configuration and etc.) if present, have to be placed in a folder where the user has read/write access.  (Petrel installation folder is typically read only!). All changeable files including project data files are subject to the path length limitation (not longer than 100 characters relative to the .ptd folder)</RuleDescription><RuleNumber>5.1</RuleNumber><RuleVerification>1. Identify all changeable files according to the installation guide.
2. Check what the user has read/write access to the folder with files identified in point 1.
3. Save project and check the filenames of the data files written by plug-in are not longer than 100 characters relative to the .ptd folder</RuleVerification><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_MANUAL_14</RuleCode><RuleDescription>Plug-in must be visible in Plug-in Manager and displays appropriate support information. (The Plugin class is implemented)</RuleDescription><RuleNumber>5.2</RuleNumber><RuleVerification>1. Open Ocean Plug-in Manager
2. The minimum information must be found:
     a. Name of company
     b. Name of module
     c. Major version (xxxx.1) of Petrel for which this plug-in applies. 
     d. Release date
     f. Support e-mail or web-link
</RuleVerification><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_MANUAL_15</RuleCode><RuleDescription>Plug-in has to provide help.In 2012.1 and beyond plug-ins must have their help show in the plug-in section of Petrel's "Help" menu. This means the plug-in is using the new API for registering help.</RuleDescription><RuleNumber>5.3</RuleNumber><RuleVerification>Before 2012.1 plug-in help location was flexible. 
In 2012.1 and beyond plug-ins must have their help show in the plug-in section of Petrel's "Help" menu. This means the plug-in is using the new API for registering help.</RuleVerification><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_MODULE_VERSION</RuleCode><RuleDescription>The module version is showed on Plug-in manager must be the same as the version was entered via release notes (or web-form)</RuleDescription><RuleNumber>5.4</RuleNumber><RuleVerification>1. Open Ocean Plug-in Manager
2. Find the version information.
3. The module version is showed on Plug-in manager must be the same as the version was entered via release notes (or web-form).</RuleVerification><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_VERSION_UPDATE</RuleCode><RuleDescription>This rule is  for module updates only.
The module version is entered to the release notes (or web-form) must be greater, than previous version.</RuleDescription><RuleNumber>5.5</RuleNumber><RuleVerification>1. Look at previous version of the plug-in.
2. Be sure the new version number is not the same as previous number. </RuleVerification><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_MANUAL_16</RuleCode><RuleDescription>Plug-in must not contain offensive content, infringe on privacy, for example  with advertisements that transmit data over the internet without knowledge of user.</RuleDescription><RuleNumber>5.6</RuleNumber><RuleVerification /><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_MANUAL_12</RuleCode><RuleDescription>A custom domain object that represents a form of measured or interpreted data values must support Reference Project Tool transfer.
Note: A waiver of RPT implementation can be requested. It needs to include a description and assessment of the implications of not supporting RPT and a plan showing when RPT will be supported in the future.</RuleDescription><RuleNumber>5.7</RuleNumber><RuleVerification>1. In Petrel, create a Petrel project (Project A) with custom domain objects
2. Save the project
3. In a new Petrel project (Project B), open the reference project tool and import all custom domain objects from Project A.</RuleVerification><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_1</RuleCode><RuleDescription>&lt;b&gt;Resizing behavior:&lt;/b&gt; Simple components (labels, buttons, etc.) must not be resized when the dialog is resized.</RuleDescription><RuleNumber>6.1</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_2</RuleCode><RuleDescription>&lt;b&gt;Open/re-open behavior:&lt;/b&gt; When a dialog is opened (from a closed state) it must present data appropriate to the context of the dialog. Typically this is the data last applied (saved) by the dialog,  but it can be new initial or empty values or data from modifications elsewhere</RuleDescription><RuleNumber>6.2</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_3</RuleCode><RuleDescription>&lt;b&gt;Layout and design:&lt;/b&gt; Petrel standard bitmaps and features must be re-used whenever possible.</RuleDescription><RuleNumber>6.3</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_4</RuleCode><RuleDescription>&lt;b&gt;Placement and layout (Commandbars):&lt;/b&gt; The commandbar buttons must be placed in a horizontal and right justified row at the bottom of the dialog.</RuleDescription><RuleNumber>6.4</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_5</RuleCode><RuleDescription>&lt;b&gt;Apply Button:&lt;/b&gt; Attributes external to the dialog must not be updated or affected by any actions or selections in the dialog, until Apply is clicked (Exemption for Run and Preview)</RuleDescription><RuleNumber>6.5</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_6</RuleCode><RuleDescription>&lt;b&gt;OK Button:&lt;/b&gt; Same as for Apply, and in addition: Clicking the OK button must close the dialog and any sub-ordinate dialogs, after the dialog settings have been successfully applied. If the current dialog settings are insufficient, then the dialog must be left open and a message dialog popped up explaining what is missing and suggesting how to proceed.</RuleDescription><RuleNumber>6.6</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_7</RuleCode><RuleDescription>&lt;b&gt;Cancel Button:&lt;/b&gt; Must close the dialog and any sub-ordinate dialogs.</RuleDescription><RuleNumber>6.7</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_8</RuleCode><RuleDescription>&lt;b&gt;Check box:&lt;/b&gt; Check boxes must be used only when the states of a choice are opposites and unambiguous.</RuleDescription><RuleNumber>6.8</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_9</RuleCode><RuleDescription>&lt;b&gt;Radio Button:&lt;/b&gt; Every radio button in a set must have a label indicating the value or effect for that choice.</RuleDescription><RuleNumber>6.9</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_10</RuleCode><RuleDescription>&lt;b&gt;Push Button:&lt;/b&gt; Labels must not be dynamically modified or depend on the system status.</RuleDescription><RuleNumber>6.10</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_11</RuleCode><RuleDescription>&lt;b&gt;Labels:&lt;/b&gt; Labels must always be displayed to the left of the component they describe (unless the component is too long, in which case the label must be displayed on the top left corner of the component).</RuleDescription><RuleNumber>6.11</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_12</RuleCode><RuleDescription>&lt;b&gt;Labels:&lt;/b&gt; Labels must always be horizontally aligned (center alignment) with the components they are associated with (when they are on the same line).</RuleDescription><RuleNumber>6.12</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_13</RuleCode><RuleDescription>&lt;b&gt;Labels:&lt;/b&gt; Labels must not be used for text that is not purely static (except when displaying units).</RuleDescription><RuleNumber>6.13</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_14</RuleCode><RuleDescription>&lt;b&gt;Text Fields:&lt;/b&gt; Text field labels must end with a colon</RuleDescription><RuleNumber>6.14</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_15</RuleCode><RuleDescription>&lt;b&gt;Worksteps:&lt;/b&gt; Ocean generated UI for plug-in or its workstep must not be used.</RuleDescription><RuleNumber>6.15</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_16</RuleCode><RuleDescription>&lt;b&gt;Units:&lt;/b&gt; The unit label has to be placed right from the display field. </RuleDescription><RuleNumber>6.16</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_17</RuleCode><RuleDescription>&lt;b&gt;Progress bar:&lt;/b&gt; A progress bar should be applied when processing may take longer than 8 seconds.</RuleDescription><RuleNumber>6.17</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_18</RuleCode><RuleDescription>&lt;b&gt;Appearance and behavior:&lt;/b&gt; Plug-ins must provide icons for processes, worksteps, and custom domain objects that provides contextual information and guidance to the user.</RuleDescription><RuleNumber>6.18</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_UI_RIBBON_STYLE</RuleCode><RuleDescription>&lt;b&gt;Ribbon Style UI Components:&lt;/b&gt; Starting with the 2014 release plug-ins must operate using the new user interface style of Petrel as well as the current "classic" user interface style.</RuleDescription><RuleNumber>6.19</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_RB_STYLE_PERSPECTIVES</RuleCode><RuleDescription>&lt;b&gt;Ribbon Style Perspectives:&lt;/b&gt; Plug-ins must use the Perspectives that are already provided by the ribbon. Data Management plug-ins should use the Data Management Perspective available from the 2015 release onward.  If a new Perspective is needed it must be requested from the Ocean Portfolio to be available to the entire ecosystem.</RuleDescription><RuleNumber>6.20</RuleNumber><RuleVerification>Check that no perspectives have been added by the plug-in. </RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_RB_STYLE_TABS</RuleCode><RuleDescription>&lt;b&gt;Ribbon Style Tabs:&lt;/b&gt; The Ocean Portfolio must create new ribbon tabs for new disciplines or domains that are currently not available in Petrel so they may be available to the entire ecosystem. Request a new tab from the Ocean Portfolio if one is needed. 
</RuleDescription><RuleNumber>6.21</RuleNumber><RuleVerification>Check that no tabs have been added by the plug-in for disciplines or domains that have not been provided by the Ocean Portfolio. </RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_RB_STYLE_NATIVE_TABS_USE</RuleCode><RuleDescription>&lt;b&gt;Ribbon Style Native Tab Use:&lt;/b&gt; Plug-in commands must be added to the appropriate native Petrel discipline or contextual tab if one is available. If no appropriate tab is available then the plug-in may add a new contextual tab. Common scenarios for adding a new contextual tab would be commands creating a new custom domain object, a new toggle window, or working on a native domain object with no contextual tab available.  </RuleDescription><RuleNumber>6.22</RuleNumber><RuleVerification>Review plug-in additions to discipline and contextual tabs. 
</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_RB_STYLE_COMMAND_LOCATION</RuleCode><RuleDescription>&lt;b&gt;Ribbon Style Command Location:&lt;/b&gt; Commands related to custom domain objects or custom windows must be added to the contextual tab belonging to the object or window. 
</RuleDescription><RuleNumber>6.23</RuleNumber><RuleVerification>Check locations of commands for custom domain objects or windows. 
</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_RB_STYLE_COMMAND_DENSITY</RuleCode><RuleDescription>&lt;b&gt;Ribbon Style Command Density:&lt;/b&gt; Plug-ins should not over crowd the discipline or contextual tabs, and should restrict themselves to a single tab group that introduces the entry points to the plug-in  functionality. Whenever possible plug-ins should make use of the group, split, or switch commands to organize related functionality into a single dropdown. </RuleDescription><RuleNumber>6.24</RuleNumber><RuleVerification>Check quantity and type of plug-in commands for over crowding. Look for proper style use. 
</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_MANIFEST_CONTENT</RuleCode><RuleDescription>*_Manifest.xml file checker.</RuleDescription><RuleNumber /><RuleVerification>The files in *_Manifest.xml file should match the files in file system.</RuleVerification><TopicName /></ChecklistRule><ChecklistRule><RuleCode>CHECK_DLLS_ARCHITECTURE</RuleCode><RuleDescription>Architecture of the assemblies checker</RuleDescription><RuleNumber /><RuleVerification>Architecture of assembly have to be same as current machine's one</RuleVerification><TopicName /></ChecklistRule></Rules></AcceptanceChecklist><AcceptanceChecklist><PlatformFamily>Techlog</PlatformFamily><Rules><ChecklistRule><RuleCode>TECHLOG_CHECK_TYPE_MANUAL_INSTALLATION</RuleCode><RuleDescription>The plug-in runs properly when installed in the installation folder (at Techlog level, company level or user level)</RuleDescription><RuleNumber>1.1</RuleNumber><RuleVerification>a.	Install the plug-in in the default installation folder following the Installation Instructions documents.
b.	Launch Techlog and run the plug-in.
c.	Repeat the same steps for all levels (Techlog level, company level and user level) 
d.	Verify that the plug-in functional behavior is the same for all levels. If it is not the case, ensure that all existing  limitations are documented.
</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_REFLECTS</RuleCode><RuleDescription>Plugin installation reflects the Techlog and plug-in versions.</RuleDescription><RuleNumber>1.2</RuleNumber><RuleVerification>Plugin installs into a folder that adheres to the following convention:
&lt;base&gt;\Extensions\Vendor\Plug-inName\MajorTLVersion.MinorTLVersion\Plug-inRevisionNumber
...where &lt;base&gt; is either User, Techlog or Company folder.
DLL files should also show use the Major.Minor.Revision.Patch scheme in the File Version property. Where applicable a proper copyright notice should appear in the Copyright property instead of the default value</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>TECHLOG_CHECK_TYPE_INSTALL</RuleCode><RuleDescription>The installation kit does not install any component outside its installation folder.</RuleDescription><RuleNumber>1.3</RuleNumber><RuleVerification>a.	Install the plug-in following Installation Instructions document
b.	Verify that no plug-in file or component is installed outside its installation folder.
</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>TECHLOG_CHECK_TYPE_3RD_PARTY</RuleCode><RuleDescription>The plug-in uninstaller uninstalls correctly the package.</RuleDescription><RuleNumber>1.4</RuleNumber><RuleVerification>a.	Uninstall the plug-in following the Uninstallation Instructions document .
b.	Check that all files from the installation folder and other environment changes (such as COM component registry entries and environment variables) have been removed from the computer. 
</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECH_VERSION_TECHLOG_PLUGIN</RuleCode><RuleDescription>The module version in the release notes must be greater, than previous version.</RuleDescription><RuleNumber>1.5</RuleNumber><RuleVerification>a.	Install last available plugin package. Note the version number in Plugin Manager. 
b.	Install the new package (triggering an upgrade)
c.	Verify that the version number increased. 
</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_RELEASE_MODE</RuleCode><RuleDescription>Plug-in binaries are built in release-mode.</RuleDescription><RuleNumber>1.8</RuleNumber><RuleVerification>Verify that no plug-in dll imports any of the platform toolset libraries for debug mode.</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>TECHLOG_CHECK_TYPE_PLATFORM_STATE</RuleCode><RuleDescription>The plug-in does not modify any system files (i.e. non-data files) during its operation except those intended (and clearly listed in Installation Instructions or Used Guide).</RuleDescription><RuleNumber>2.1</RuleNumber><RuleVerification>a.	Identify in the plug-in documentation all files that could be modified during the plug-in operation.
b.	Run the plug-in using use cases provided in Testing Documentation. 
c.	Check that no additional files are modified by the plug-in, except those intended
</RuleVerification><TopicName>Stability</TopicName></ChecklistRule><ChecklistRule><RuleCode>TECHLOG_CHECK_TYPE_MANUAL_PLATFORM_PERFOMANCE</RuleCode><RuleDescription>Plug-in does not crash, stop responding,  become unstable or corrupts data during the validation.</RuleDescription><RuleNumber>2.2</RuleNumber><RuleVerification>a.	Perform random functional testing. Run testing use cases using different configurations (with different projects/unit system, changing the parameters, changing the data,?)
b.	Track and document all testing results. 
c.	All known crashes (due to the plug-in or to the platform ? Ocean APU) have to be documented
</RuleVerification><TopicName>Stability</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_ANTIVIRUS</RuleCode><RuleDescription>Installer has to pass antivirus check</RuleDescription><RuleNumber>4.1</RuleNumber><RuleVerification>Use an anti-virus application manually to check the assemblies being deployed with your plug-in. </RuleVerification><TopicName>Security</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_LICENSING_TECHLOG_API</RuleCode><RuleDescription>The plug-in implemented the licensing using Ocean for Techlog API.</RuleDescription><RuleNumber>4.2</RuleNumber><RuleVerification>a.	Install the plug-in as per installation instructions. Do not install the license seat.
b.	Enable the plug-in in Plugin Manager. Verify that an error message requesting the license is displayed in output window.
c.	Install the license seat (check Installation Guide to see the required license and how to install it). 
d.	Enable the plug-in in Plugin Manager. Verify that no error message is displayed and the plug-in runs normally.

Licensing shall be verified without the Ocean for Techlog developer license present and if the plug-in is for the Ocean Store distribution, it must work without the Techlog-SLB-license. 
</RuleVerification><TopicName>Security</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_OPEN_SOURCE</RuleCode><RuleDescription>The plug-in does not contain improper use of open source code (public APIs/3rd party libraries).</RuleDescription><RuleNumber>4.3</RuleNumber><RuleVerification>For each plug-in, furnish Schlumberger with an open source software scan and malware/virus report from Black Duck Software, Inc. of Burlington MA, USA, or an equivalent company approved by Schlumberger, indicating that there is no reciprocal or viral open source software nor any virus or malware included with the plug-in.

Contact your technology center management and your responsible legal counsel with your specific questions.</RuleVerification><TopicName>Security</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_LICENSE_PLUGIN</RuleCode><RuleDescription>The plug-in does not infringe third party licensing.</RuleDescription><RuleNumber>4.4</RuleNumber><RuleVerification>1) 3rd party components must be listed in the documentation submitted with the plug-in. 
2) See also the related Security Check Item number 0 above. For open source components, the license should be specified. Only licenses that do not make SLB liable to expose its intellectual property shall be used by plug-ins. 
</RuleVerification><TopicName>Security</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_USER_PRIVACY</RuleCode><RuleDescription>The plug-in does not violate user privacy (e.g. advertisements that transmit data over the internet without knowledge of customer or modify client personal information).</RuleDescription><RuleNumber>4.5</RuleNumber><RuleVerification>SIS uses a third party provider, such as Black Duck Software, to analyze the composition of software source code and binary files and to manage open source  code. All open source software must be approved by the center management and legal organizations.  Contact your technology center management and your responsible legal counsel with your specific questions.</RuleVerification><TopicName>Security</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TCC_INFO</RuleCode><RuleDescription>Trade Control Compliance measures related to the plug-in are fully.</RuleDescription><RuleNumber>4.6</RuleNumber><RuleVerification>Additional information on Trade Control Compliance can be found on SLB TCC website. Please refer to existing TCC procedure defined for your segment.</RuleVerification><TopicName>Security</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_BIN_SCOPE_ANALYSE</RuleCode><RuleDescription>BinScope</RuleDescription><RuleNumber>4.9</RuleNumber><RuleVerification>BinScope</RuleVerification><TopicName>Security</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_CERTIFICATE</RuleCode><RuleDescription>Plug-in package is signed with a valid and rooted certificate and timestamped.</RuleDescription><RuleNumber>4.8</RuleNumber><RuleVerification>Run following commands:
1.	"C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin\signtool.exe" verify /pa Xyz.msi
2.	"C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin\signtool.exe" verify /v /pa Xyz.msi
</RuleVerification><TopicName>Security</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_PLUGIN_HELP</RuleCode><RuleDescription>Enabled plug-in in Plugin Manager should not slow down Techlog. </RuleDescription><RuleNumber>5.1</RuleNumber><RuleVerification>-Measure the Techlog startup time with and without your plug-in enabled. Check that the difference is not greater than a 0.5%.
-Run a basic Techlog workstep with and without your plug-in enabled. Che</RuleVerification><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_PLUGIN_VERSION</RuleCode><RuleDescription>The plug-in displays appropriate support information in Plug-in Manager.

Minimum required information:
1.Company name
2.Plug-in name
3.Major version of Techlog for which this plug-in applies. 
4.Plugin version (matching the version in the release notes)
5.Release date
6.Support contact (e-mail, web-link or equivalent)
7.License used to run the plug-in
</RuleDescription><RuleNumber>5.2</RuleNumber><RuleVerification>a.	Install the plug-in following Installation Instructions document. 
b.	Open Ocean Plug-in Manager, select the plug-in.
c.	Check that minimum required information is present

</RuleVerification><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_UPDATE_PLUGIN_TECHLOG_VERSION</RuleCode><RuleDescription>Plug-in provides help support.</RuleDescription><RuleNumber>5.3</RuleNumber><RuleVerification>Currently, Ocean for Techlog API does not support interactive help implementation. Nevertheless, relevant and helpful information can be displayed via a ribbon or plot toolbar button.
1. Verify that the help action (specified in the User Guide) opens the plug-in documentation and the support information is correctly displayed.
2. Verify that the documentation appears to be professionally formatted, readable, navigable and indexed for searching. 
</RuleVerification><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_CORRECTLY_RUN</RuleCode><RuleDescription>The plug-in correctly runs with all Techlog versions specified in Installation Instructions or in User Guide.</RuleDescription><RuleNumber>5.4</RuleNumber><RuleVerification>a.	Review the plug-in Installation Instructions to identify Techlog versions the plug-in operates with.
b.	Check the plug-in ability to run with all versions indicated.
</RuleVerification><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_USABILITY</RuleCode><RuleDescription>Plug-in follows Techlog User Interface Standards and Guidelines.</RuleDescription><RuleNumber>5.5</RuleNumber><RuleVerification>1. A survey to assess various aspects of the product usability can be implemented during the User Acceptance Testing sessions.
2. The usability survey metric provides a quantifiable measure of the efficiency, satisfaction, usefulness, trust and pleasure that a user derives from using a product.
See SIS Usability Survey Template
3. HFE in collaboration with MpTC Usability team are working on a concise version of Techlog UX/UI Guidelines (Usability Checklist). This checklist can be used to verify compliance to Techlog style guide. The Usability checklist version should be specified (if different official versions exist). </RuleVerification><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_DOC_PACKAGE</RuleCode><RuleDescription>Plug-in package includes documentation:
1.	Plug-in provides User Guide/Manual
2.	Plug-in provides Release Notes
3.	Plug-in provides Installation/Uninstallation Instructions
</RuleDescription><RuleNumber>7.1</RuleNumber><RuleVerification>Plug-in package includes documentation:
1.	Plug-in provides User Guide/Manual
2.	Plug-in provides Release Notes
3.	Plug-in provides Installation/Uninstallation Instructions
</RuleVerification><TopicName>Functionality</TopicName></ChecklistRule></Rules></AcceptanceChecklist><AcceptanceChecklist><PlatformFamily>StudioManager</PlatformFamily><Rules><ChecklistRule><RuleCode>CHECK_DOC1</RuleCode><RuleDescription>1. Plug-in has to provide installation/uninstallation instructions including release notes. 
2. The release notes must provide details on the features of the plug-in that were added or removed from a previous release. It should also include descriptions of bugs fixed since the previous release. 
</RuleDescription><RuleNumber>1.1</RuleNumber><RuleVerification>1. Review installation guide.
2. Prepare environment (OS, Studio Manager version, 3rd part application, licenses, etc).
3. Install the plug-in.
4. Review release notes.
5. Using the Release Notes for information test for bugs that were fixed and workarounds that were provided. 
</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_INSTALL</RuleCode><RuleDescription>Plug-in installer must correctly install the package.
Installation must NOT modify the StudioManager.exe.config file. 
</RuleDescription><RuleNumber>1.2</RuleNumber><RuleVerification>1. Install the plug-in.
2. Check that all files for the plug-in are installed in the correct folders. 
3. Verify that the StudioManager.exe.config file has not been modified. 
4. Verify that &lt;StudioManager2014Home&gt;\Plugins\Catalog.dat has an entry for the newly installed plug-in.
5. Verify that an entry for the plug-in appears in Control Panel/Installed Programs List
</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_UNINSTALL</RuleCode><RuleDescription>Plug-in uninstaller must correctly uninstall the package. </RuleDescription><RuleNumber>1.3</RuleNumber><RuleVerification>1. Verify that the entry related to the plug-in is removed from &lt;StudioManager2014Home&gt;\Plugins\Catalog.dat.
2. Verify that the entry for the plug-in is removed from Control Panel/Installed Programs list.
</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_MSI</RuleCode><RuleDescription>1. Plug-in installer has to be an MSI file (Sample Package is provided)
2. The installation guide must provide instructions for unattended installation. 
</RuleDescription><RuleNumber>1.4</RuleNumber><RuleVerification>1. Installer must be an MSI.
2. Installer must install the required plug-in files to a folder under &lt;StudioManager2014Home&gt;\Plugins\ and have a custom action that executes StudioPluginManager.exe with /r (register) option to register the plug-in.
3. Installer must install the plug-in so that the plug-in shows up under Installed Programs in Control Panel.
4. Installer must not install any components into Petrel or Techlog
Note: A Sample Installer Project (SimpleSampleInstaller.sln) is provided as a guideline
</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_NATIVE_DLL</RuleCode><RuleDescription>The installed dll files list must not include any dll files installed by StudioManager except for OceanCA.dll and 3rd party libraries used out of process (follow rule 1.6).</RuleDescription><RuleNumber>1.5</RuleNumber><RuleVerification>The installed dll files list must not include any dll files installed by StudioManager except for OceanCA.dll and 3rd party libraries used out of process (follow rule 1.6).</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_3RD_PARTY_DLL</RuleCode><RuleDescription>1.	Any use of 3rd party libraries should be clearly documented. Care should be taken not to require very specific versions of commonly used libraries (eg Qt, FFT, Zlib1, Office Interop), as this may cause conflicts with other plug-ins.
2.	 If the plug-in has to make use of a 3rd party library that is installed with StudioManager, but not explicitly listed in the Ocean for Studio Release Notes, this library should be merged using ILMerge or similar tool or statically linked to one of the plug-in dll files. 
3.	The version of any 3rd party library used by the plug-in must be clearly indicated. This 3rd party library version must be readily available to developers of other plug-ins.
4.	The plug-in must comply with the Open Source provisions of the Ocean Software Development Framework License Agreement and/or the Ocean Remarketer program.
</RuleDescription><RuleNumber>1.6</RuleNumber><RuleVerification>1. Make sure 3rd party libraries are mentioned in the release notes including version numbers.
2. Make sure 3rd party libraries are mentioned in the installation guide if any installation time action is needed.
3. Make sure the necessary files/installers for 3rd party libraries are readily available. 
4. Align with the 3rd party library versions documented in the Ocean Release Notes, unless the library is statically compiled in, or executed out-of-process and installed into a folder that is not on the StudioManager private probing path. 
5. Check that the plug-in does not take dependency on any 3rd party libraries installed with StudioManager but not explicitly documented in Ocean Release Notes.
6. Require that the plugin producers provide the analysis report of Black Duck or other approved vendor.
</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_SHARED_DLL</RuleCode><RuleDescription>The installed dll files with same name used in different plug-ins has to be:
* identical (for native),
* Identical or a different Assembly Version for managed.

Managed libraries included in multiple plug-ins from the same vendor may have different content and at the same time the same Assembly Version, when the vendor proves:
* the library is installed in just one copy per major Petrel version regardless of the number of plug-ins installed, 
* the assembly has a different Assembly File Version, 
* the assembly is binary backwards and forwards compatible,
* the plug-ins are tested for mutual coexistence in all version combinations (e.g. the shared assembly is behavior compatible)
 
Libraries shared by multiple plug-ins from different vendors must be included in the 3rd party library list (see 1.6)
</RuleDescription><RuleNumber>1.7</RuleNumber><RuleVerification>If a library is used in multiple plug-ins, then check that each is using an identical copy (for native), or different Assembly Version (for managed), and keep the dependent library stable for a full major StudioManager release cycle.

Managed libraries included in multiple plug-ins from the same vendor differ in Assembly Version or be backward and forward compatible with each other (all publically visible types and signatures must match across all versions). This can be verified by a tool such as NDepend in both directions version1 -&gt; version2 and version2-&gt;version1 (i.e. in the backward and forward direction).

When such library is included in multiple plug-ins, it must only physically install in one copy. 

Vendor provides evidence that all version combinations of previously published plug-ins using this library were tested. Ocean Acceptance team cannot take responsibility for behavior compatibility testing.
</RuleVerification><TopicName>Deployment</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_STABILITY</RuleCode><RuleDescription>Studio Manager does not stop responding, crashes, or becomes unstable during the validation.</RuleDescription><RuleNumber>2.1</RuleNumber><RuleVerification>Thorough (fit for purpose) testing should be performed and documented.  The Schlumberger Acceptance Team will review all documentation to determine its suitability and perform random functional testing.</RuleVerification><TopicName>Stability</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_PERFORMANCE</RuleCode><RuleDescription>Performance check. Start-up time of StudioManager is not affected by the plug-in by more than 0.5%. Plug-in installers are encouraged to schedule ngen for plug-in assemblies. </RuleDescription><RuleNumber>2.2</RuleNumber><RuleVerification>Measure startup time for StudioManager with and without your plug-in present. Since a plug-in can have multiple modules look at the startup time difference and divide by the number of modules for a per module start time cost. The difference should be less than or equal to 0.5% of the empty StudioManager startup time. </RuleVerification><TopicName>Stability</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_LICENSES</RuleCode><RuleDescription>When a plug-in is loaded without a license being checked out, it should restrict access to plug-in functionality. </RuleDescription><RuleNumber>3.1</RuleNumber><RuleVerification>Using the test StudioManager project that contains data created by the plug-in. Run StudioManager without the plug-in license.</RuleVerification><TopicName>Module Lifecycle</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_LICENSES2</RuleCode><RuleDescription>Module uses Flex Feature for licensing.</RuleDescription><RuleNumber>3.2</RuleNumber><RuleVerification>1. Start StudioManager with the module and its Flex Feature license available.
2. Start the plug-in without a message about license unavailable.
3. Close and restart StudioManager with the plug-in Flex Feature license unavailable.
4. The plug-in should post to the message log to inform the user the license is unavailable.
</RuleVerification><TopicName>Module Lifecycle</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_BUILD</RuleCode><RuleDescription>In general, the plug-in must be built on the major release of StudioManager (It will then work with any subsequent minor release).</RuleDescription><RuleNumber>3.3</RuleNumber><RuleVerification>1. Review the plug-in installation guide and release notes to identify StudioManager versions the plug-in operates with. 
2. Check the plug-in installation and uninstall and its ability to run against all assigned versions.
</RuleVerification><TopicName>Module Lifecycle</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_PETREL_API</RuleCode><RuleDescription>The plug-in is only allowed to use public API's.</RuleDescription><RuleNumber>3.4</RuleNumber><RuleVerification>The plug-in is only allowed to use public API's.</RuleVerification><TopicName>Module Lifecycle</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_STRONGLY_NAMED</RuleCode><RuleDescription>All assemblies shipped by the plug-in have to be strongly named.</RuleDescription><RuleNumber>4.1</RuleNumber><RuleVerification>1. Need to install .NET Framework SDK 
2. Use following command to validate that the assembly is strongly named. 
sn ?v 
3. If the assembly is strongly named, sn.exe will display the following message: 
Assembly is valid. </RuleVerification><TopicName>Security</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_CERTIFICATE</RuleCode><RuleDescription>Plug-in installer is Authenticode-signed with a valid certificate that can be chained to the root on a fully patched Windows 7 PC. The Issued To name on the certificate corresponds to the plug-in vendor name and the signature is time stamped.</RuleDescription><RuleNumber>4.2</RuleNumber><RuleVerification>1."C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin\signtool.exe" verify /pa Xyz.msi
2."C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin\signtool.exe" verify /v /pa Xyz.msi
</RuleVerification><TopicName>Security</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_ANTIVIRUS</RuleCode><RuleDescription>Installer has to pass antivirus check</RuleDescription><RuleNumber>4.3</RuleNumber><RuleVerification>Use an anti-virus application manually to check the assemblies being deployed with your plug-in. </RuleVerification><TopicName>Security</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_MODIFIED_FILES</RuleCode><RuleDescription>Validate that the plug-in does not modify any system files during its operation except those intended.</RuleDescription><RuleNumber>4.4</RuleNumber><RuleVerification>After execution of StudioManager including plug-in check for modified files. </RuleVerification><TopicName>Security</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_CHANGEBLE_FILES</RuleCode><RuleDescription>All changeable files (configuration and etc.) if present, have to be placed in a folder where the user has read/write access.  (StudioManager installation folder is typically read only!).</RuleDescription><RuleNumber>5.1</RuleNumber><RuleVerification>1. Identify all changeable files according to the installation guide.
2. Check what the user has read/write access to the folder with files identified in point 1.
</RuleVerification><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_PLUGINMANAGER_INFO</RuleCode><RuleDescription>Plug-in must be visible in Plug-in Manager and display appropriate support information.

(applies to Studio Manager 2014.1 and above)
</RuleDescription><RuleNumber>5.2</RuleNumber><RuleVerification>1. Open Studio Manager Plug-in Manager
2. The minimum information must be found:
     a. Name of company
     b. Name of plug-in
     c. Plug-in description 
     d. Plug-in version
     f. Support e-mail or web-link
</RuleVerification><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_HELP</RuleCode><RuleDescription>Plug-in has to provide help.</RuleDescription><RuleNumber>5.3</RuleNumber><RuleVerification>Plug-in has to provide help.</RuleVerification><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_VERSION</RuleCode><RuleDescription>The module version shown in Plug-in manager must be the same as the version entered via release notes (or web-form)

(applies to Studio Manager 2014.1 and above)
</RuleDescription><RuleNumber>5.4</RuleNumber><RuleVerification>1. Open Ocean Plug-in Manager
2. Find the version information.
3. The module version shown in Plug-in manager must be the same as the version that was entered via release notes (or web-form).
</RuleVerification><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_VERSION1</RuleCode><RuleDescription>This rule is for module updates only.
The module version in the release notes must be greater, than previous version.
</RuleDescription><RuleNumber>5.5</RuleNumber><RuleVerification>1. Look at previous version of the plug-in.
2. Be sure the new version number is not the same as previous number. 
</RuleVerification><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_OFFENSIVE_CONTENT</RuleCode><RuleDescription>Plug-in must not contain offensive content, infringe on privacy, for example with advertisements that transmit data over the internet without knowledge of user.</RuleDescription><RuleNumber>5.6</RuleNumber><RuleVerification>Plug-in must not contain offensive content, infringe on privacy, for example with advertisements that transmit data over the internet without knowledge of user.</RuleVerification><TopicName>Fundamentals</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TYPE_UI_COLOR_PALETTES</RuleCode><RuleDescription>Color Palettes.  Where ever possible, plug-in color schemes should follow the palettes recommended in the Studio Manager UI and UX Guidelines</RuleDescription><RuleNumber>6.1</RuleNumber><RuleVerification>Perform UI usability testing.</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_RESIZING_BEHAVIOUR</RuleCode><RuleDescription>Resizing behavior: Simple components (labels, buttons, etc.) must not be resized when the dialog is resized.</RuleDescription><RuleNumber>6.2</RuleNumber><RuleVerification>Perform UI usability testing.</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_OPENREOPEN</RuleCode><RuleDescription>Open/re-open behavior: When a dialog is opened (from a closed state) it must present data appropriate to the context of the dialog. Typically this is the data last applied (saved) by the dialog, but it can be new initial or empty values or data from modifications elsewhere.</RuleDescription><RuleNumber>6.3</RuleNumber><RuleVerification>Perform UI usability testing.</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_LAYOUT</RuleCode><RuleDescription>Layout and design: StudioManager standard bitmaps and features must be re-used whenever possible.</RuleDescription><RuleNumber>6.4</RuleNumber><RuleVerification>Perform UI usability testing.</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_CANCEL_BUTTON</RuleCode><RuleDescription>Cancel Operation  The "X" close operation in the tabbed panel must close the plug-in workspace and any subordinate applications.</RuleDescription><RuleNumber>6.5</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECHK_CHECKBOX</RuleCode><RuleDescription>Check box: Check boxes must be used only when the states of a choice are opposites and unambiguous.</RuleDescription><RuleNumber>6.6</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_RADIO_BUTTON</RuleCode><RuleDescription>Radio Button: Every radio button in a set must have a label indicating the value or effect for that choice.</RuleDescription><RuleNumber>6.7</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_PUSH_BUTTON</RuleCode><RuleDescription>Push Button: Labels must not be dynamically modified or depend on the system status.</RuleDescription><RuleNumber>6.8</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_LABELS</RuleCode><RuleDescription>Labels: Labels must always be displayed to the left of the component they describe (unless the component is too long, in which case the label must be displayed on the top left corner of the component).</RuleDescription><RuleNumber>6.9</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_LABELS1</RuleCode><RuleDescription>Labels: Labels must always be horizontally aligned (center alignment) with the components they are associated with (when they are on the same line).</RuleDescription><RuleNumber>6.10</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_UI_LABELS_FOR_STATIC</RuleCode><RuleDescription>Labels: Labels must not be used for text that is not purely static (except when displaying units).</RuleDescription><RuleNumber>6.11</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_TEXT_FIEDS</RuleCode><RuleDescription>Text Fields: Text field labels must end with a colon.</RuleDescription><RuleNumber>6.12</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule><ChecklistRule><RuleCode>CHECK_UNITS</RuleCode><RuleDescription>Units: The unit label has to be placed right from the display field. </RuleDescription><RuleNumber>6.13</RuleNumber><RuleVerification>Perform UI usability test</RuleVerification><TopicName>UI</TopicName></ChecklistRule></Rules></AcceptanceChecklist></ArrayOfAcceptanceChecklist>